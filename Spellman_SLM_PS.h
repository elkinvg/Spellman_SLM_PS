/*----- PROTECTED REGION ID(Spellman_SLM_PS.h) ENABLED START -----*/
//=============================================================================
//
// file :        Spellman_SLM_PS.h
//
// description : Include file for the Spellman_SLM_PS class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Spellman_SLM_PS_H
#define Spellman_SLM_PS_H

#include <tangosocket.h>
#include <tango.h>




/*----- PROTECTED REGION END -----*/	//	Spellman_SLM_PS.h

/**
 *  Spellman_SLM_PS class description:
 *    Server for powersupply Spellman SLM
 */

namespace Spellman_SLM_PS_ns
{
/*----- PROTECTED REGION ID(Spellman_SLM_PS::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	Spellman_SLM_PS::Additional Class Declarations

class Spellman_SLM_PS : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Spellman_SLM_PS::Data Members) ENABLED START -----*/

//	Add your own data members
    TangoSocket *tangoSocket;

    const char STX = 0x02;
    const char COMMA = 0x2C;
    const char ETX = 0x03;
    const char SUCCESS = 0x24;

    // state Socket
    bool isSocketOn;
    // status bool
    bool isHvOn;
    bool isInterlockOpen;
    bool isFaultCondition;
    bool isIModeOn;
    bool isROVEnabled; // Remote Overvoltage Adjust: ROV
    bool isAOLEnabled; // Adjustable Overload Trip: AOL
    bool isWatchdogEnabled; // Watchdog Timer

/*----- PROTECTED REGION END -----*/	//	Spellman_SLM_PS::Data Members

//	Device property data members
public:
	//	Socket:	Tango device name in format ``domain/family/member``
	string	socket;
	//	isRS232:	The device is connected on the RS 232
	Tango::DevBoolean	isRS232;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevUShort	*attr_Voltage_read;
	Tango::DevUShort	*attr_Amperage_read;
	Tango::DevUShort	*attr_VoltageMonitor_read;
	Tango::DevUShort	*attr_AmperageMonitor_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Spellman_SLM_PS(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Spellman_SLM_PS(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Spellman_SLM_PS(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Spellman_SLM_PS() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Spellman_SLM_PS::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Spellman_SLM_PS::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Voltage related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Voltage(Tango::Attribute &attr);
	virtual void write_Voltage(Tango::WAttribute &attr);
	virtual bool is_Voltage_allowed(Tango::AttReqType type);
/**
 *	Attribute Amperage related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Amperage(Tango::Attribute &attr);
	virtual void write_Amperage(Tango::WAttribute &attr);
	virtual bool is_Amperage_allowed(Tango::AttReqType type);
/**
 *	Attribute VoltageMonitor related methods
 *	Description: The host requests that the firmware report kV monitor.
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_VoltageMonitor(Tango::Attribute &attr);
	virtual bool is_VoltageMonitor_allowed(Tango::AttReqType type);
/**
 *	Attribute AmperageMonitor related methods
 *	Description: The host requests that the firmware report mA monitor.
 *               
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_AmperageMonitor(Tango::Attribute &attr);
	virtual bool is_AmperageMonitor_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Spellman_SLM_PS::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command ResetFaults related method
	 *	Description: The host requests that the firmware resets all Fault messages and indicators.
	 *
	 */
	virtual void reset_faults();
	virtual bool is_ResetFaults_allowed(const CORBA::Any &any);
	/**
	 *	Command RequestStatus related method
	 *	Description: The host requests that the firmware sends the power supply status.
	 *
	 */
	virtual void request_status();
	virtual bool is_RequestStatus_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Spellman_SLM_PS::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Spellman_SLM_PS::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
    //elkin
private:
    string generateCommand(string idCommand, vector<string> arguments);
    string generateCommand(string idCommand); // without arguments

    vector<string> sendCommand(string idCommand, vector<string> arguments);
    vector<string> sendCommand(string idCommand); // without arguments

    vector<string> parseResponse(string response);
    void checkSocketState();

/*----- PROTECTED REGION END -----*/	//	Spellman_SLM_PS::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Spellman_SLM_PS::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Spellman_SLM_PS::Additional Classes Definitions

}	//	End of namespace

#endif   //	Spellman_SLM_PS_H
